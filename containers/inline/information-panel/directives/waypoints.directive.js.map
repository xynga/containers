{"version":3,"file":"waypoints.directive.js","sourceRoot":"","sources":["../../../../inline/information-panel/directives/waypoints.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAA2B,MAAM,eAAe,CAAC;AAE3G,OAAO,wCAAwC,CAAC;AAIhD,IAAM,QAAQ,GAAW,YAAY,CAAC;;IAapC,2BAA0B,OAAmB;QAAnB,YAAO,GAAP,OAAO,CAAY;0BALd,KAAK;8BACT,IAAI,YAAY,EAAE;KAII;IAE1C,2CAAe,GAAtB;QAAA,iBAEC;QADC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,EAAE,GAAG,CAAC,CAAC;KAC3C;IAEM,uCAAW,GAAlB;QAAA,iBAmBC;QAlBC,IAAI,MAAM,GAAQ;YAChB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;YACnC,OAAO,EAAE,UAAC,SAAiB,IAAK,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,EAAnC,CAAmC;SACpE,CAAC;QAEF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;SAC7B;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;SAC/B;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;SACrC;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;KACtC;IAEM,uCAAW,GAAlB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;SACzB;KACF;;gBA1CF,SAAS,SAAC;oBACT,QAAQ,EAAE,QAAQ;iBACnB;;;;gBAVkB,UAAU;;;4BAY1B,KAAK;2BACL,KAAK;+BACL,KAAK;mCACL,MAAM;;4BAfT;;SAWa,iBAAiB","sourcesContent":["import {Directive, ElementRef, Input, Output, EventEmitter, AfterViewInit, OnDestroy} from '@angular/core';\n\nimport 'waypoints/lib/noframework.waypoints.js';\n\ndeclare let Waypoint: any;\n\nconst SELECTOR: string = '[waypoint]';\n\n@Directive({\n  selector: SELECTOR\n})\nexport class WaypointDirective implements AfterViewInit, OnDestroy {\n  @Input() context: Element;\n  @Input() offset: number | string;\n  @Input() horizontal: boolean = false;\n  @Output() waypointChange = new EventEmitter();\n\n  public waypoint: any;\n\n  public constructor(public element: ElementRef) {}\n\n  public ngAfterViewInit(): void {\n    setTimeout(() => this.setWaypoint(), 250);\n  }\n\n  public setWaypoint(): void {\n    let config: any = {\n      element: this.element.nativeElement,\n      handler: (direction: string) => this.waypointChange.emit(direction)\n    };\n\n    if (this.offset) {\n      config.offset = this.offset;\n    }\n\n    if (this.context) {\n      config.context = this.context;\n    }\n\n    if (this.horizontal) {\n      config.horizontal = this.horizontal;\n    }\n\n    this.waypoint = new Waypoint(config);\n  }\n\n  public ngOnDestroy(): void {\n    if (this.waypoint) {\n      this.waypoint.destroy();\n    }\n  }\n}\n"]}